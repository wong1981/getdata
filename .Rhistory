}
str(dat2)
head(dat2)
median (dat$Weight)
median (dat$Weight, na.rm=TRUE)
?str
dat_30 <- dat[which(dat$Day == 30]
dat_30 <- dat[which(dat[,"Day" == 30]
dat_30
dat_30 <- dat[which(dat[,"Day" == 30]
dat_30
median(dat_30$Weight)
dat_30 <- dat[which(dat[,"Day" == 30]]
dat_30 <- dat[which(dat[,"Day"] == 30]
dat_30
dat_30 <- dat [which(dat[, "Day"] == 30, ]
dat_30 <- dat [which(dat[, "Day"] == 30, ]
dat_30
dat_30 <- dat [which(dat[, "Day"] == 30, ]
dat_30 <- dat[which(dat[, "Day"] == 30, ]
dat_30 <- dat[which(dat[, "Day"] == 30),]
dat_30
median(dat_30$Weight)
dat_30 <- dat[which(dat[, "Day"] == 30),]
dat_30
View(day_25)
View(dat_30)
weightmedian <- function(directory, day) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame()
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[, "Day"] == day),]
#read-out
median(dat_subset[, "Weight"], na.rm=TRUE)
} #content of the function
weightmedian("diet_data", 4)
weightmedian("diet_data", 20)
weightmedian("diet_data", 17)
weightmedian(, 17)
weightmedian(, 17)
weightmedian(, 17)
weightmedian("diet_data", 17)
summary(files_full)
tmp <- vector(mode = "list", length = length(files_full))
summary (tmp)
for (i in seq_along(files_full)) {
tmp [[i]] <- read.csv(files_full[[i]])
}
str(tmp)
str(lapply(files_full,read.csv))
str(tmp[[1]])
head(tmp[[i]][,"Day"])
output <- do.call(rbind,tmp)
str(output)
library(datasets)
library(datasets)
data(iris)
?iris
q1 <- colmeans(Sepal.Length=virginica)
q1 <- colmean(Sepal.Length=virginica)
?colmean
?colmeans
?cmean
q1 <- colmeans(Sepal.Length=virginica)
q1 <- colmeans(iris[Sepal.Length=virginica])
q1 <- colmeans(iris,Sepal.Length=virginica)
q1 <- colMeans(iris,Sepal.Length=virginica)
q1 <- colMeans(iris,Sepal.Length = "virginica")
q1 <- colMeans(iris$Sepal.Length = "virginica")
q1 <- colMeans(iris$Sepal.Length [virginica])
q1 <- colMeans(iris$Sepal.Length)
q1 <- colMeans(iris$Sepal.Length, dims = 1L)
q1 <- colMeans(iris$Sepal.Length, virginica)
q1 <- colMeans(iris$Sepal.Length, dims = 1, virginica)
mean(iris$sepal.length)
mean([[iris$sepal.length]])
mean(iris$sepal.length)
colmean(iris$sepal.length, )
colmeans(iris$sepal.length, )
colmeans(iris$sepal.length=virginica )
colmeans(iris[sepal.length=virginica])
?colmeans
?colMeans
colMeans (iris, iris$sepal.Length = "virginica")
colMeans (iris, iris$sepal.Length[virginica)
colMeans (iris, iris$sepal.Length,[virginica)
colMeans (iris, iris$sepal.Length,(virginica))
colMeans (iris, iris$sepal.Length)
colMeans (iris, iris$sepal.Length, na.rm=TRUE)
colMeans (iris, iris$sepal.Length, dims = 1, na.rm=TRUE)
colMeans (iris, iris$sepal.Length = "virginica", dims = 1, na.rm=TRUE)
mean (iris[iris$Species == "virginica",]$Sepal.Length)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
debug(ls)
ls
ls
?ls
?debug function
?debug
mean(iris)
str(iris)
mean(iris$Species = "virginica")
mean(iris$Species == "virginica")
mean(iris$Species == "virginica", Sepal.Length)
mean([iris$Species == "virginica"], Sepal.Length)
mean(iris[iris$Species == "virginica"], Sepal.Length)
mean(iris[iris$Species == "virginica",] Sepal.Length)
mean(iris[iris$Species == "virginica",]$Sepal.Length)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
data(mtcars)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
mean (mtcars[mtcars$cyl =="8"]$hp - mtcars[mtcars$cyl =="4"]$hp)
mean (mtcars[mtcars$cyl == "8"]$hp - mtcars[mtcars$cyl == "4"]$hp)
mean (mtcars[mtcars$cyl == "8",]$hp - mtcars[mtcars$cyl == "4",]$hp)
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
library(swirl)
swirl()
1:20
pi:10
15:1
?:`
?`:`
seq(1,20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length = 30)
length()
my_seq
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times= 40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each = 10)
num_vect (c(0.5, 55, -10, 6))
num_vect <- (c(0.5, 55, -10, 6))
num_vect <- c(0.5, 55, -10, 6)
tf <- (num_vect < 1)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "TJ")
my_name <- c(my_char, "TJ")
my name
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X", "Y", "Z"), sep = "" )
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
3*x
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
is.na( my_data == NA)
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(x[3,5,7])
x(c(x[3,5,7]))
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo","bar", "norf")
vect
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attribute(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
my_matrx <- colnames(cnames)
colnames(my_data) <- cnames
my_data
exit
library(swirl)
swirl()
swirl()
==
+ == -
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7 == TRUE
6 < 7
10 <= 10
5 != 7
(5 == 7) != TRUE
!(5 == 7) = TRUE
(5 == 7) = !TRUE
(5 != 7) == TRUE
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(sum(flag_colors)
flag
lapply(sum(flags$flag_colors)
lapply(sum(flags$flag_colors)
lapply(flagcolors, sum())
lapply(sum(flags$flag_colors))
lapply(sum(flags$flag_colors()))
lapply(flag_colors, sum())
lapply(flag_colors, sum(flags))
lapply(flag_colors, sum(flag_colors))
lapply(sum(flag_colors))
sum(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(unique_vals, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library(swirl)
swirl
swirl()
Sys.Date()
mean( c(2, 4, 5))
boring_function <- function(x) {
x
return(x)
}
source('C:/Users/Aapie/AppData/Local/Temp/RtmpMbchbI/boring_function.R')
submit()
boring_function(`My first function`)
boring_function("My first function")
boring_function ('My first function')
boring_function ('My first function!')
boring_function
source('C:/Users/Aapie/AppData/Local/Temp/RtmpMbchbI/my_mean.R')
submit
submit()
source('C:/Users/Aapie/AppData/Local/Temp/RtmpMbchbI/my_mean.R')
my_mean(c(4, 5, 10))
source('C:/Users/Aapie/AppData/Local/Temp/RtmpMbchbI/remainder.R')
submit()
source('~/.active-rstudio-document')
submit()
source('C:/Users/Aapie/AppData/Local/Temp/RtmpMbchbI/remainder.R')
source('~/.active-rstudio-document')
submit()
source('C:/Users/Aapie/AppData/Local/Temp/RtmpMbchbI/remainder.R')
submit()
source('C:/Users/Aapie/AppData/Local/Temp/RtmpMbchbI/remainder.R')
submit()
source('~/.active-rstudio-document')
submit()
source('~/.active-rstudio-document')
submit()
source('~/.active-rstudio-document')
submit()
source('~/.active-rstudio-document')
submit()
source('~/.active-rstudio-document')
remainder(7)
source('~/.active-rstudio-document')
remainder(7)
source('C:/Users/Aapie/AppData/Local/Temp/RtmpMbchbI/remainder.R')
remainder(7)
source('~/.active-rstudio-document')
remainder(7)
source('~/.active-rstudio-document')
submit()
source('C:/Users/Aapie/AppData/Local/Temp/RtmpMbchbI/remainder.R')
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
source('C:/Users/Aapie/AppData/Local/Temp/RtmpMbchbI/evaluate.R')
submit
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x}, c(8,4,0))
evaluate(x, c(8,4,0))
evaluate(func(x), c(8,4,0))
evaluate(func(x){}, c(8,4,0))
evaluate(function(x){}, c(8,4,0))
evaluate(function(x){x}, c(8,4,0))
info()
evaluate(, c(8,4,0))
evaluate(,c(8,4,0))
source('C:/Users/Aapie/AppData/Local/Temp/RtmpMbchbI/evaluate.R')
evaluate(,c(8,4,0))
evaluate(x,c(8,4,0))
evaluate(c(8,4,0))
evaluate( function(func){} ,c(8,4,0))
evaluate( function(x){} ,c(8,4,0))
evaluate(function(x){c(8,4,0)})
evaluate(function(x),c(8,4,0))
evaluate(function(x){},c(8,4,0))
evaluate(func(x){},c(8,4,0))
evaluate(x,c(8,4,0))
evaluate(func(x){[1,]},c(8,4,0))
evaluate(func(x){head[1,]},c(8,4,0))
skip()
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[,3]}, c(8, 4, 0))
evaluate(function(x){length(x)}, c(8, 4, 0))
evaluate(function(x){[3,]}, c(8, 4, 0))
evaluate(function(x){[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){length[x]}, c(8, 4, 0))
evaluate(function(x){length(x)}, c(8, 4, 0))
skip()
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
source('~/.active-rstudio-document')
submit
submit()
source('C:/Users/Aapie/AppData/Local/Temp/RtmpMbchbI/telegram.R')
submit()
telegram(blabla)
telegram("blabla")
source('~/.active-rstudio-document')
submit
submit()
skip()
source('C:/Users/Aapie/AppData/Local/Temp/RtmpMbchbI/mad_libs.R')
submit()
madlibs(amsterdam, showing, occuppy)
mad_libs(amsterdam, showing, occuppy)
skip()
source('C:/Users/Aapie/AppData/Local/Temp/RtmpMbchbI/bin_op.R')
submit()
past("I love", "R")
skip()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
library(xlsx)
library(xlss)
library(xlsx)
install.packages("xlsx")
install.packages("XML")
install.packages("jsonlite")
swirl()
library(swirl)
swirl()
?read.cvs
??read.csv
path2csv
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id,package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
-(x:size)
select (cran, -(x:size))
select(cran, -x:size)
select(cran, -(x:size)
)
select(cran, -(x:size))
select(cran, -x:size)
select(cran, x:size)
select(cran, -{x:size})
select(cran, -{x:-size})
select(cran, -x:-size)
select(cran, -(X:size)
)
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
View(cran)
View(cran)
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, > 100500, r_os =="linux-gnu")
filter(cran, X > 100500, r_os =="linux-gnu")
filter(cran, size > 100500, r_os =="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version) )
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20  )
mutate(cran3, size_mb = size / 2^20, size_gb = size / 2^^10  )
mutate(cran3, size_mb = size / 2^20, size_gb = size / 2^10  )
mutate(cran3, size_mb = size / 2^20, size_gb = size / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate (cran3, correct_siz = siz -1000)
mutate (cran3, correct_siz = size - 1000)
mutate (cran3, correct_siz = size + 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
setwd("E:/Coursera/getdata")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
install.packages("zip")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
?write txt
?write
write.table(tidy.avgs.data.set, tidy.avgs.data.txt)
write.table(tidy.avgs.data.set, tidy.avgs.data.txt,  row.name=FALSE)
tidy.avgs.data.txt <- './tidy-UCI-HAR-avgs-dataset.txt'
write.table(tidy.avgs.data.set, tidy.avgs.data.txt,  row.name=FALSE)
head(tidy-UCI-HAR-avgs-dataset.txt)
head(tidy.avgs.data.txt)
str(tidy.avgs.data.txt)
View(X)
View(tidy.avgs.data.txt)
